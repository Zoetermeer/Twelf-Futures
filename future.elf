% p ::= e (e N) ...   (where N ranges over nats) 

% threads is a list of threads in the program. 
% a thread is an exp * nat pair, where the nat is the future id.
thread 	: type. 					%name thread T.
mkthread : expr -> nat -> thread. 
threads : type. 
nothreads : threads.  % empty thread list 
consthreads : thread -> threads -> threads. 


prog : type. 						%name prog P.
mkprog : exps -> threads -> prog. 

% Judgments ?
progstep : prog -> prog -> type.  			%name progstep PS.
estp : expr -> threads -> expr -> thread -> type. 	%name estp EST.


estp_s_nt : estp (s E1) nothreads E1' T 
	<-  estp E1 nothreads E1' T.      
estp_s_ts : estp E1 (consthreads 


% These rules indicate that for a given expression and 
% thread expression, we can either take a step in evaluating 
% the expr on the main thread, or take a step in evaluating 
% the one on the other thread.
threadstep 	: EM (E0 0)  EM (E0' 0) 
		<- E0 E0' 
mainstep 	: EM (E0 0) EM' (E0 0) 
		<- EM EM'	


